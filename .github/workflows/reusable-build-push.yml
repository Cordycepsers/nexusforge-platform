name: Reusable Build and Push

on:
  workflow_call:
    inputs:
      service:
        description: 'Service name (python, node, go)'
        required: true
        type: string
      dockerfile:
        description: 'Path to Dockerfile'
        required: true
        type: string
      context:
        description: 'Build context path'
        required: false
        type: string
        default: '.'
      region:
        description: 'GCP Region'
        required: false
        type: string
        default: 'us-central1'
      repository:
        description: 'Artifact Registry repository name'
        required: false
        type: string
        default: 'nexusforge-docker'
      image_tag:
        description: 'Primary image tag'
        required: true
        type: string
      additional_tags:
        description: 'Additional tags (comma-separated)'
        required: false
        type: string
        default: ''
      build_args:
        description: 'Build arguments (KEY=VALUE format, one per line)'
        required: false
        type: string
        default: ''
      platforms:
        description: 'Target platforms'
        required: false
        type: string
        default: 'linux/amd64'
      scan_image:
        description: 'Run security scan on built image'
        required: false
        type: boolean
        default: true
      push_image:
        description: 'Push image to registry'
        required: false
        type: boolean
        default: true
    secrets:
      GCP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_SERVICE_ACCOUNT:
        required: true
      GCP_PROJECT_ID:
        required: true
    outputs:
      image_url:
        description: 'Full image URL'
        value: ${{ jobs.build.outputs.image_url }}
      digest:
        description: 'Image digest'
        value: ${{ jobs.build.outputs.digest }}
      image_size:
        description: 'Image size in MB'
        value: ${{ jobs.build.outputs.size_mb }}

env:
  REGION: ${{ inputs.region }}

jobs:
  build:
    name: Build ${{ inputs.service }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
      security-events: write
    outputs:
      image_url: ${{ steps.build-push.outputs.image_url }}
      digest: ${{ steps.build-push.outputs.digest }}
      size_mb: ${{ steps.build-push.outputs.image_size }}
    
    steps:
      # ============================================
      # Checkout code
      # ============================================
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ============================================
      # Setup GCP authentication
      # ============================================
      - name: Setup GCP
        uses: ./.github/actions/setup-gcp
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          region: ${{ env.REGION }}
          setup_docker: 'true'

      # ============================================
      # Generate build metadata
      # ============================================
      - name: Generate Build Metadata
        id: meta
        run: |
          echo "::group::Generate build metadata"
          
          # Generate additional tags based on context
          EXTRA_TAGS="${{ inputs.additional_tags }}"
          
          # Add branch name as tag
          BRANCH_NAME="${GITHUB_REF_NAME//\//-}"
          if [ -n "$EXTRA_TAGS" ]; then
            EXTRA_TAGS="${EXTRA_TAGS},${BRANCH_NAME}"
          else
            EXTRA_TAGS="${BRANCH_NAME}"
          fi
          
          # Add 'latest' tag if on main/master branch
          if [ "$GITHUB_REF_NAME" == "main" ] || [ "$GITHUB_REF_NAME" == "master" ]; then
            EXTRA_TAGS="${EXTRA_TAGS},latest"
          fi
          
          # Add SHA tag
          SHORT_SHA="${GITHUB_SHA:0:7}"
          EXTRA_TAGS="${EXTRA_TAGS},sha-${SHORT_SHA}"
          
          echo "additional_tags=${EXTRA_TAGS}" >> $GITHUB_OUTPUT
          
          echo "Generated tags: ${EXTRA_TAGS}"
          echo "::endgroup::"

      # ============================================
      # Prepare build arguments
      # ============================================
      - name: Prepare Build Arguments
        id: build-args
        run: |
          echo "::group::Prepare build arguments"
          
          # Combine input build args with standard args
          BUILD_ARGS="${{ inputs.build_args }}"
          
          # Add CI context
          BUILD_ARGS="${BUILD_ARGS}
          CI=true
          GITHUB_SHA=${GITHUB_SHA}
          GITHUB_REF=${GITHUB_REF}
          GITHUB_REPOSITORY=${GITHUB_REPOSITORY}
          BUILD_NUMBER=${GITHUB_RUN_NUMBER}"
          
          echo "build_args<<EOF" >> $GITHUB_OUTPUT
          echo "${BUILD_ARGS}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"

      # ============================================
      # Build and push Docker image
      # ============================================
      - name: Build and Push Image
        id: build-push
        uses: ./.github/actions/build-and-push-image
        with:
          service: ${{ inputs.service }}
          dockerfile: ${{ inputs.dockerfile }}
          context: ${{ inputs.context }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          region: ${{ env.REGION }}
          repository: ${{ inputs.repository }}
          image_tag: ${{ inputs.image_tag }}
          additional_tags: ${{ steps.meta.outputs.additional_tags }}
          build_args: ${{ steps.build-args.outputs.build_args }}
          platforms: ${{ inputs.platforms }}
          cache_enabled: 'true'
          scan_image: ${{ inputs.scan_image }}
          push_image: ${{ inputs.push_image }}

      # ============================================
      # Extract image information
      # ============================================
      - name: Extract Image Information
        id: info
        run: |
          echo "::group::Extract image information"
          
          IMAGE_URL="${{ steps.build-push.outputs.image_url }}"
          DIGEST="${{ steps.build-push.outputs.digest }}"
          SIZE="${{ steps.build-push.outputs.image_size }}"
          
          echo "Image built successfully:"
          echo "  URL: ${IMAGE_URL}"
          echo "  Digest: ${DIGEST}"
          echo "  Size: ${SIZE} bytes"
          
          # Save to outputs
          echo "image_url=${IMAGE_URL}" >> $GITHUB_OUTPUT
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          
          echo "::endgroup::"

      # ============================================
      # Generate SBOM (Software Bill of Materials)
      # ============================================
      - name: Generate SBOM
        if: inputs.push_image
        run: |
          echo "::group::Generate SBOM"
          
          # Install syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Generate SBOM
          syft "${{ steps.build-push.outputs.image_url }}" \
            -o json=sbom.json \
            -o spdx-json=sbom-spdx.json \
            -o cyclonedx-json=sbom-cyclonedx.json
          
          echo "SBOM generated successfully"
          
          echo "::endgroup::"

      # ============================================
      # Upload SBOM as artifact
      # ============================================
      - name: Upload SBOM
        if: inputs.push_image
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ inputs.service }}-${{ inputs.image_tag }}
          path: |
            sbom*.json
          retention-days: 90

      # ============================================
      # Create build summary
      # ============================================
      - name: Create Build Summary
        run: |
          echo "## 🐳 Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ${{ inputs.service }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Image URL | \`${{ steps.build-push.outputs.image_url }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Digest | \`${{ steps.build-push.outputs.digest }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| Size | ${{ steps.build-push.outputs.image_size }} bytes |" >> $GITHUB_STEP_SUMMARY
          echo "| Platforms | ${{ inputs.platforms }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Pushed | ${{ inputs.push_image }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Tags" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ inputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY
          
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.additional_tags }}"
          for tag in "${TAGS[@]}"; do
            echo "- \`${tag}\`" >> $GITHUB_STEP_SUMMARY
          done

  # ============================================
  # Vulnerability scan
  # ============================================
  scan:
    name: Scan ${{ inputs.service }}
    runs-on: ubuntu-latest
    needs: build
    if: inputs.scan_image && inputs.push_image
    permissions:
      contents: read
      security-events: write
      id-token: write
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup GCP
        uses: ./.github/actions/setup-gcp
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          region: ${{ env.REGION }}
          setup_docker: 'true'

      - name: Scan Image for Vulnerabilities
        uses: ./.github/actions/security-scan
        with:
          scan_type: 'container'
          image_ref: ${{ needs.build.outputs.image_url }}
          severity: 'CRITICAL,HIGH,MEDIUM'
          fail_on_severity: 'CRITICAL'
          upload_sarif: 'true'

  # ============================================
  # Sign image with Cosign (optional)
  # ============================================
  sign:
    name: Sign ${{ inputs.service }}
    runs-on: ubuntu-latest
    needs: [build, scan]
    if: inputs.push_image && (success() || needs.scan.result == 'success')
    permissions:
      contents: read
      id-token: write
    
    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Setup GCP
        uses: ./.github/actions/setup-gcp
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          region: ${{ env.REGION }}
          setup_docker: 'true'

      - name: Sign Image
        run: |
          echo "::group::Sign container image"
          
          # Sign the image using keyless signing with GitHub OIDC
          cosign sign --yes \
            "${{ needs.build.outputs.image_url }}@${{ needs.build.outputs.digest }}"
          
          echo "Image signed successfully"
          echo "::endgroup::"

      - name: Verify Signature
        run: |
          echo "::group::Verify image signature"
          
          # Verify the signature
          cosign verify \
            --certificate-identity-regexp="https://github.com/${{ github.repository }}/*" \
            --certificate-oidc-issuer=https://token.actions.githubusercontent.com \
            "${{ needs.build.outputs.image_url }}@${{ needs.build.outputs.digest }}"
          
          echo "Signature verified successfully"
          echo "::endgroup::"
