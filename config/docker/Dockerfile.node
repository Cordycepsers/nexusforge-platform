# ============================================
# Node.js Service Dockerfile (Express/TypeScript)
# Multi-stage build for production deployment
# ============================================

# ============================================
# Stage 1: Builder
# ============================================
FROM node:16-alpine AS builder

# Set working directory
WORKDIR /build

# Copy package files
COPY workspace/nodejs/package*.json ./
COPY workspace/nodejs/tsconfig.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY workspace/nodejs/src ./src
COPY workspace/nodejs/prisma ./prisma

# Generate Prisma Client
RUN npx prisma generate

# Build TypeScript to JavaScript
RUN npm run build

# Prune dev dependencies
RUN npm prune --production

# ============================================
# Stage 2: Runtime
# ============================================
FROM node:16-alpine

# Set environment variables
ENV NODE_ENV=production \
    PORT=3000

# Install runtime dependencies
RUN apk add --no-cache \
    curl \
    dumb-init

# Create non-root user
RUN addgroup -g 1001 -S appuser && \
    adduser -S -u 1001 -G appuser appuser

# Set working directory
WORKDIR /app

# Copy built application from builder
COPY --from=builder --chown=appuser:appuser /build/dist ./dist
COPY --from=builder --chown=appuser:appuser /build/node_modules ./node_modules
COPY --from=builder --chown=appuser:appuser /build/package*.json ./
COPY --from=builder --chown=appuser:appuser /build/prisma ./prisma

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Run the application
CMD ["node", "dist/index.js"]
